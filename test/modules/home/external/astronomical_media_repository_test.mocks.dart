// Mocks generated by Mockito 5.4.5 from annotations
// in astromedia/test/modules/home/external/astronomical_media_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:astromedia/core/external/api/domain/i_interceptor/i_request_interceptor.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IRequestInterceptor].
///
/// See the documentation for Mockito's code generation for more information.
class MockIRequestInterceptor extends _i1.Mock
    implements _i2.IRequestInterceptor {
  @override
  _i3.Future<dynamic> get(String? path, {Object? data}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [path], {#data: data}),
            returnValue: _i3.Future<dynamic>.value(),
            returnValueForMissingStub: _i3.Future<dynamic>.value(),
          )
          as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> put(String? path, {Object? data}) =>
      (super.noSuchMethod(
            Invocation.method(#put, [path], {#data: data}),
            returnValue: _i3.Future<dynamic>.value(),
            returnValueForMissingStub: _i3.Future<dynamic>.value(),
          )
          as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> post(String? path, {Object? data}) =>
      (super.noSuchMethod(
            Invocation.method(#post, [path], {#data: data}),
            returnValue: _i3.Future<dynamic>.value(),
            returnValueForMissingStub: _i3.Future<dynamic>.value(),
          )
          as _i3.Future<dynamic>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
